/* // Color
// ------------------------- */
/* // Align
// ------------------------- */
/* //Font
//-------------------------- */
/* // Themes colors
// ------------------------- */
/* // Font-family
// ------------------------- */
/* // Text transform
// ------------------------- */
/* My Style */
/*// Center-align a block level element*/
/*// Sizing shortcuts*/
/*// Placeholder text*/
/*// Text overflow
// Requires inline-block or block for proper styling*/
/*// CSS image replacement
// Source: https://github.com/h5bp/html5-boilerplate/commit/aa0396eae757*/
/*
*  Responsive
*/
/* Max Width 1200px  */

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
